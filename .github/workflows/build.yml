name: Publish Docker image

on:
  workflow_dispatch:
    inputs:
      push:
        description: "Push to container registry"
        required: false
        default: false
        type: boolean
      simulate_schedule:
        description: "Simulate schedule"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "5 3 * * *"
  push:
    branches:
      - "**"
    tags:
      - "*"
    paths-ignore:
      - "**.yml"
      - "**.yaml"
      - "**.md"
      - "**.txt"
      - ".gitattribute"
      - ".gitignore"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - "**.yml"
      - "**.yaml"
      - "**.md"
      - "**.txt"
      - ".gitattribute"
      - ".gitignore"

env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository_owner }}/github_runner

jobs:
  set_vars:
    name: Set variables
    runs-on: ubuntu-latest
    outputs:
      is_schedule: ${{ steps.set_outputs.outputs.is_schedule }}
      is_workflow_dispatch: ${{ steps.set_outputs.outputs.is_workflow_dispatch }}
    steps:
      - name: Set outputs
        id: set_outputs
        run: |
          is_schedule=${{ github.event_name == 'schedule' || inputs.simulate_schedule == 'true' }}
          is_workflow_dispatch=${{ github.event_name == 'workflow_dispatch' && inputs.simulate_schedule != 'true' }}
          echo "is_schedule=$is_schedule" >> $GITHUB_OUTPUT
          echo "is_workflow_dispatch=$is_workflow_dispatch" >> $GITHUB_OUTPUT

  build_and_push:
    name: Build and push images
    needs: set_vars
    runs-on: windows-${{ matrix.year }}
    strategy:
      fail-fast: false
      matrix:
        year: [2019, 2022]
    if: ${{ success() && (!(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))) }}
    outputs:
      push_2019: ${{ steps.push_image.outputs.push_2019 == 'true' }}
      push_2022: ${{ steps.push_image.outputs.push_2022 == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}
          flavor: |
            latest=false
          tags: |
            type=sha,prefix=,suffix=-ltsc${{ matrix.year }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=GitHub Actions runner for Windows Server Core ltsc${{ matrix.year }}
            org.opencontainers.image.licenses=MIT

      - name: Build image
        working-directory: ./runner/
        run: |
          $ErrorActionPreference = "Stop"
          Invoke-Expression "docker build --isolation process --pull --build-arg LTSC_YEAR=${{ matrix.year }} $($env:TAGS.Split("`n") | % { '-t "' + $_ + '"' }) $($env:LABELS.Split("`n") | % { '--label "' + $_ + '"' }) ."
          if ($LASTEXITCODE -ne 0) { throw 'Docker build failed.' }
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}
        if: ${{ success() && (contains(fromJson('["push", "pull_request"]'), github.event_name) || needs.set_vars.outputs.is_workflow_dispatch == 'true') }}

      - name: Docker login
        id: docker_login
        run: |
          $ErrorActionPreference = "Stop"
          echo $env:GITHUB_TOKEN | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          if ($LASTEXITCODE -ne 0) { throw 'Docker login failed.' }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ success() && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (inputs.push && needs.set_vars.outputs.is_workflow_dispatch == 'true')) }}

      - name: Push image
        id: push_image
        run: |
          $ErrorActionPreference = "Stop"
          $success = $false
          foreach ($tag in $env:TAGS.Split("`n")) {
            docker push $tag
            if ($LASTEXITCODE -ne 0) { throw 'Docker push failed.' }
          }
          Write-Output "::set-output name=push_${{ matrix.year }}::true"
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        if: ${{ success() && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (inputs.push && needs.set_vars.outputs.is_workflow_dispatch == 'true')) }}

      - name: Docker logout
        run: docker logout ${{ env.REGISTRY }}
        if: ${{ always() && steps.docker_login.outcome != 'skipped' }}

  push_manifest:
    name: Push Docker manifest to Container Registry
    runs-on: windows-latest
    needs: [build_and_push, set_vars]
    if: ${{ always() && needs.set_vars.outputs.is_schedule != 'true' && ((needs.build_and_push.result == 'success' && needs.build_and_push.outputs.push_2019 == 'true' && needs.build_and_push.outputs.push_2022 == 'true') || (needs.build_and_push.result == 'skipped' && (github.event_name == 'push' && github.ref_type == 'tag'))) }}
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker login
        id: docker_login
        run: |
          echo $env:GITHUB_TOKEN | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=tag

      - name: Push manifest
        run: |
          $sha = $(git rev-parse --short HEAD)
          $repo = "${{ env.REGISTRY }}/${{ env.REPO }}".ToLower()
          docker manifest create "${repo}:${sha}" --amend "${repo}:${sha}-ltsc2019" --amend "${repo}:${sha}-ltsc2022"
          docker manifest push "${repo}:${sha}"

      - name: Docker logout
        run: docker logout ${{ env.REGISTRY }}
        if: ${{ always() && steps.docker_login.outcome != 'skipped' }}